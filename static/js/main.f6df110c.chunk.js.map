{"version":3,"sources":["Scene.js","shaders/Vertex.js","shaders/Fragment.js","App.js","reportWebVitals.js","index.js"],"names":["Scene","props","setupResize","window","addEventListener","resize","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","updateProjectionMatrix","start","bind","stop","animate","this","scene","THREE","antialias","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","mount","clientWidth","clientHeight","appendChild","domElement","position","set","controls","OrbitControls","composer","EffectComposer","time","addObjects","material","extensions","derivatives","side","uniforms","type","value","resolution","uvRate1","vertexShader","fragmentShader","renderPass","RenderPass","addPass","glitchPass","GlitchPass","geometry","torFunction","geometry1","graykleinFunction","setAttribute","attributes","array","plane","add","u","v","target","Math","PI","x","sin","y","cos","z","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","render","renderScene","id","ref","Component","App","className","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"8SA+PeA,E,kDAtPb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwJRC,YAAc,WACZC,OAAOC,iBAAiB,SAAU,EAAKC,SA1JtB,EA6JnBA,OAAS,WACP,EAAKC,MAAQ,EAAKC,UAAUC,YAC5B,EAAKC,OAAS,EAAKF,UAAUG,aAC7B,EAAKC,SAASC,QAAQ,EAAKN,MAAO,EAAKG,QACvC,EAAKI,OAAOC,OAAS,EAAKR,MAAQ,EAAKG,OACvCM,QAAQC,IAAI,UA8BZ,EAAKH,OAAOI,yBACZF,QAAQC,IAAI,EAAKH,SA9LjB,EAAKK,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACZ,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBALE,E,gEASjBG,KAAKC,MAAQ,IAAIC,IACjBF,KAAKX,SAAW,IAAIa,IAAoB,CAAEC,WAAW,IAErDH,KAAKX,SAASe,cAAc,EAAU,GACtCJ,KAAKX,SAASC,QAAQU,KAAKhB,MAAOgB,KAAKb,QACvCa,KAAKX,SAASgB,yBAA0B,EACxCL,KAAKX,SAASiB,eAAiBJ,IAE/BF,KAAKf,UAAYsB,SAASC,eAAe,SACzCR,KAAKhB,MAAQgB,KAAKS,MAAMC,YACxBV,KAAKb,OAASa,KAAKS,MAAME,aACzBX,KAAKS,MAAMG,YAAYZ,KAAKX,SAASwB,YAErCb,KAAKT,OAAS,IAAIW,IAChB,GACAF,KAAKhB,MAAQgB,KAAKb,OAClB,GACA,KAGFa,KAAKT,OAAOuB,SAASC,IAAI,EAAG,EAAG,GAC/Bf,KAAKgB,SAAW,IAAIC,IAAcjB,KAAKT,OAAQS,KAAKX,SAASwB,YAC7Db,KAAKkB,SAAW,IAAIC,IAAgBnB,KAAKX,UACzCW,KAAKoB,KAAO,EACZpB,KAAKpB,cACLoB,KAAKqB,aACLrB,KAAKD,UACLC,KAAKjB,W,mCAKLiB,KAAKsB,SAAW,IAAIpB,IAAqB,CACvCqB,WAAY,CACVC,YAAa,mDAEfC,KAAMvB,IACNwB,SAAU,CACRN,KAAM,CAAEO,KAAM,IAAKC,MAAO,GAC1BC,WAAY,CAAEF,KAAM,KAAMC,MAAO,IAAI1B,KACrC4B,QAAS,CACPF,MAAO,IAAI1B,IAAc,EAAG,KAGhC6B,aC9DW,shCD+DXC,eE9Da,ijBFiEfhC,KAAKiC,WAAa,IAAIC,IAAYlC,KAAKC,MAAOD,KAAKT,QACvDS,KAAKkB,SAASiB,QAASnC,KAAKiC,YAE5BjC,KAAKoC,WAAa,IAAIC,IACtBrC,KAAKkB,SAASiB,QAASnC,KAAKoC,YAIxBpC,KAAKsC,SAAW,IAAIpC,IAClBF,KAAKuC,YACL,IACA,KAEFvC,KAAKwC,UAAY,IAAItC,IACnBF,KAAKyC,kBACL,IACA,KAGFzC,KAAKsC,SAASI,aAAa,YAAa,IAAIxC,IAAsBF,KAAKwC,UAAUG,WAAW7B,SAAS8B,MAAO,IAE5G5C,KAAK6C,MAAQ,IAAI3C,IAAWF,KAAKsC,SAAUtC,KAAKsB,UAChDtB,KAAKC,MAAM6C,IAAI9C,KAAK6C,S,qCAGPE,EAAGC,EAAGC,GACnBF,GAAKG,KAAKC,GACVH,GAAgB,GAAVE,KAAKC,GAEX,IAAIC,EAAIF,KAAKG,IAAIN,GAAKG,KAAKG,IAAIL,GAC3BM,EAAIJ,KAAKG,IAAIN,GAAKG,KAAKK,IAAIP,GAC3BQ,EAAIN,KAAKK,IAAIR,GAEjBE,EAAOlC,IAAIqC,EAAGE,EAAGE,K,kCAGPT,EAAGC,EAAGC,GAChBF,GAAa,EAARG,KAAKC,GACVH,GAAe,EAAVE,KAAKC,GACVH,IAAME,KAAKC,GAEX,IAAIC,EAAIF,KAAKK,IAAIP,GAAKE,KAAKG,IAAIN,GAAGG,KAAKK,IAAIP,GACvCM,EAAIJ,KAAKG,IAAIL,GAAKE,KAAKG,IAAIN,GAAGG,KAAKG,IAAIL,GACvCQ,EAAIN,KAAKK,IAAIR,GAEjBE,EAAOlC,IAAIqC,EAAGE,EAAGE,K,oCAGLT,EAAGC,EAAGC,GAElBF,GAAe,EAAVG,KAAKC,GAASD,KAAKC,GACxBH,GAAe,EAAVE,KAAKC,GAEV,IAAIC,EACFF,KAAKK,IAAIR,IALH,EAOJG,KAAKG,IAAIL,GAAKE,KAAKK,IAAIR,EAAI,GAC1BG,KAAKG,IAAI,EAAIL,GAAKE,KAAKG,IAAIN,EAAI,GAAM,GACtCO,EACFJ,KAAKG,IAAIN,IAVH,EAYJG,KAAKG,IAAIL,GAAKE,KAAKK,IAAIR,EAAI,GAC1BG,KAAKG,IAAI,EAAIL,GAAKE,KAAKG,IAAIN,EAAI,GAAM,GACtCS,EACFN,KAAKG,IAAIN,EAAI,GAAKG,KAAKG,IAAIL,GAAME,KAAKK,IAAIR,EAAI,GAAKG,KAAKG,IAAI,EAAIL,GAAM,EAExEC,EAAOlC,IAAIqC,EAAGE,EAAGE,K,wCAGDT,EAAGC,EAAGC,GAItBF,GAAe,EAAVG,KAAKC,GACVH,GAAe,EAAVE,KAAKC,GAEV,IAAIC,GANI,EAMKF,KAAKK,IALV,EAKgBR,EAAI,GAAOG,KAAKG,IAAIL,GAAKE,KAAKG,IAL9C,EAKoDN,EAAE,GAAOG,KAAKG,IAAI,EAAEL,IAAIE,KAAKK,IAJjF,EAIuFR,EAAE,GAC7FO,GAPI,EAOKJ,KAAKK,IANV,EAMgBR,EAAI,GAAOG,KAAKG,IAAIL,GAAKE,KAAKG,IAN9C,EAMoDN,EAAE,GAAOG,KAAKG,IAAI,EAAEL,IAAIE,KAAKG,IALjF,EAKuFN,EAAE,GAC7FS,EAAIN,KAAKG,IAPL,EAOWN,EAAE,GAAOG,KAAKG,IAAIL,GAAKE,KAAKK,IAPvC,EAO6CR,EAAE,GAAOG,KAAKG,IAAI,EAAEL,GAEzEC,EAAOlC,IAAIqC,EAAGE,EAAGE,K,oCAGLT,EAAGC,EAAGC,GAClB,IAAIG,EAAIL,EACJO,EAAIN,EAGRC,EAAOlC,IAAIqC,EAAGE,EAFN,K,6CAMRtD,KAAKF,OACLE,KAAKS,MAAMgD,YAAYzD,KAAKX,SAASwB,c,8BA+ChCb,KAAK0D,UACR1D,KAAK0D,QAAUC,sBAAsB3D,KAAKD,Y,6BAK5C6D,qBAAqB5D,KAAK0D,W,gCAM1B1D,KAAKoB,MAAQ,IACbpB,KAAKsB,SAASI,SAASN,KAAKQ,MAAQ5B,KAAKoB,KAezCpB,KAAK0D,QAAUC,sBAAsB3D,KAAKD,SAC1CC,KAAKkB,SAAS2C,SACd7D,KAAK8D,gB,oCAIL9D,KAAKX,SAASwE,OAAO7D,KAAKC,MAAOD,KAAKT,U,+BAG9B,IAAD,OACP,OACE,qBACEwE,GAAG,QACHC,IAAK,SAACvD,GACJ,EAAKA,MAAQA,S,GAhPHwD,aG0BLC,MA9Bf,WACE,OACE,qCACA,sBAAKC,UAAU,QAAf,UACA,oBAAIA,UAAU,eAAd,iCACA,qBAAKA,UAAU,iBACf,sBAAKA,UAAU,aAAf,UACE,mBACEA,UAAU,cACVC,KAAK,4CAFP,sBAMA,mBAAGD,UAAU,cAAcC,KAAK,IAAhC,oBAGA,mBACED,UAAU,cACVC,KAAK,2CAFP,0BAQD,cAAC,EAAD,QChBUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFxE,SAASC,eAAe,SAM1B6D,M","file":"static/js/main.f6df110c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { vertex } from \"./shaders/Vertex\";\nimport { fragment } from \"./shaders/Fragment\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    this.renderer.setClearColor(0x000000, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.1,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 6);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.composer = new EffectComposer( this.renderer );\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n    this.resize();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.renderPass = new RenderPass( this.scene, this.camera );\nthis.composer.addPass( this.renderPass );\n\nthis.glitchPass = new GlitchPass();\nthis.composer.addPass( this.glitchPass );\n\n    \n\n    this.geometry = new THREE.ParametricBufferGeometry(\n      this.torFunction,\n      100,\n      100\n    );\n    this.geometry1 = new THREE.ParametricBufferGeometry(\n      this.graykleinFunction,\n      100,\n      100\n    );\n\n    this.geometry.setAttribute('position1', new THREE.BufferAttribute(this.geometry1.attributes.position.array, 3));\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  sphereFunction(u, v, target) {\n    u *= Math.PI;\n    v *= -Math.PI * 2;\n\n    let x = Math.sin(u) * Math.sin(v);\n    let y = Math.sin(u) * Math.cos(v);\n    let z = Math.cos(u);\n\n    target.set(x, y, z);\n  }\n\n  torFunction(u, v, target) {\n    u *= Math.PI*2;\n    v *= Math.PI * 2;\n    v -=- Math.PI;\n\n    let x = Math.cos(v) + Math.sin(u)*Math.cos(v);\n    let y = Math.sin(v) + Math.sin(u)*Math.sin(v);\n    let z = Math.cos(u);\n\n    target.set(x, y, z);\n  }\n\n  kleinFunction(u, v, target) {\n    let a = 1;\n    u *= Math.PI * 2 - Math.PI;\n    v *= Math.PI * 2;\n\n    let x =\n      Math.cos(u) *\n      (a +\n        Math.sin(v) * Math.cos(u / 2) -\n        (Math.sin(2 * v) * Math.sin(u / 2)) / 2);\n    let y =\n      Math.sin(u) *\n      (a +\n        Math.sin(v) * Math.cos(u / 2) -\n        (Math.sin(2 * v) * Math.sin(u / 2)) / 2);\n    let z =\n      Math.sin(u / 2) * Math.sin(v) + (Math.cos(u / 2) * Math.sin(2 * v)) / 2;\n\n    target.set(x, y, z);\n  }\n\n  graykleinFunction(u, v, target) {\n    let a = 3;\n    let n = 2;\n    let m = 1;\n    u *= Math.PI * 4;\n    v *= Math.PI * 2;\n\n    let x = (a + Math.cos(n*u / 2.0) * Math.sin(v) - Math.sin(n*u/2.0) * Math.sin(2*v))*Math.cos(m*u/2.0); \n    let y = (a + Math.cos(n*u / 2.0) * Math.sin(v) - Math.sin(n*u/2.0) * Math.sin(2*v))*Math.sin(m*u/2.0);\n    let z = Math.sin(n*u/2.0) * Math.sin(v) + Math.cos(n*u/2.0) * Math.sin(2*v)\n\n    target.set(x, y, z);\n  }\n\n  planeFunction(u, v, target) {\n    let x = u;\n    let y = v;\n    let z = 0;\n\n    target.set(x, y, z);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    /*  this.imageAspect = 853 / 1280;\n\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    } */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    //this.cube.rotation.x += 0.01;\n    //this.cube.rotation.y += 0.01;\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n\n    /*   this.geometry.vertices.forEach((vector) => {\n      let u = (vector.x + 0.5) * Math.PI * 2;\n      let v = (vector.y + 0.5) * Math.PI;\n\n      vector.x = Math.sin(u) * Math.sin(v);\n      vector.y = Math.sin(u) * Math.cos(v);\n      vector.z = Math.cos(u);\n\n      //v.z = 0.5*Math.sin(v.y * 50.);\n    }); */\n\n    //this.geometry.vertices.needsUpdate = true;\n\n    this.frameId = requestAnimationFrame(this.animate);\n    this.composer.render();\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","export var vertex = `\n\nuniform float time;\nvarying vec2 vUv;\nvarying vec4 vPosition;\nuniform vec2 pixels;\nvarying vec3 vNormal;\nattribute vec3 position1;\n\nvoid main()\t{\n  \n    vUv = uv;\n    vNormal =normal;\n\n\n\n\n    float u = uv.x *  3.1415925* 4.;\n    float v = uv.y *  3.1415925 * 2.;\n\n    float a = 3.;\n    float n = 2.;\n    float m = 1.;\n\n    float x = (a + cos(n*u / 2.0) * sin(v) - sin(n*u/2.0) * sin(2.*v))*cos(m*u/2.0); \n    float y = (a + cos(n*u / 2.0) * sin(v) - sin(n*u/2.0) * sin(2.*v))*sin(m*u/2.0);\n    float z = sin(n*u/2.0) * sin(v) + cos(n*u/2.0) * sin(2.*v);\n\n    vec3 klein = vec3(x,y,z);\n\n    float u1 = uv.x *  3.1415925;\n    float v1 = uv.y * -3.1415925 * 2.;\n\n    float x1 = sin(u1) * sin(v1);\n    float y1 = sin(u1) * cos(v1);\n    float z1 = cos(u1);\n\n    vec3 sphere = vec3(x1,y1,z1);\n\n    vec3 pos = mix(klein, sphere,0.5 + 0.5 * sin(time/3.));\n\n\n     vec3 final = mix(position, position1, 0.5 + 0.5 * sin(time/3.));\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n}\n`;\n","\nexport var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec4 vPosition;\nvarying vec3 vNormal;\n\n\nvoid main()\t{\n  \n    float diff = abs(dot(normalize(vec3(1.,1.,1.)),vNormal));\n    \n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(2.0,1.0,0.0);\n    vec3 d = vec3(0.50,0.20,0.25);\n    vec3 color = a + b * cos(2. * 3.1415925 * (c * diff+d + time /5. ));\n\n\n\n    \n    gl_FragColor = vec4(color,1.);\n\n}\n`;","\nimport './App.css';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"frame\">\n    <h1 className=\"frame__title\">Shape Morphing Demo</h1>\n    <div className=\"frame__links\"></div>\n    <div className=\"frame__nav\">\n      <a\n        className=\"frame__link\"\n        href=\"https://isengupt.github.io/fiber-website/\"\n      >\n        Previous\n      </a>\n      <a className=\"frame__link\" href=\"#\">\n        Resume\n      </a>\n      <a\n        className=\"frame__link\"\n        href=\"https://github.com/isengupt/morph-shape/\"\n      >\n        GitHub\n      </a>\n    </div>\n  </div>\n     <Scene/>\n     </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}